networks:
  proxy:
    name: proxy
    external: true
    ipam:
      driver: default

services:
  caddy:
    container_name: caddy
    build: .
    restart: always
    env_file: .caddy.env
    ports:
      - 80:80
      - 443:443
    extra_hosts:
      - host.docker.internal:host-gateway
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /config/homelab/volumes/caddy/data/:/data/caddy
      - /config/homelab/volumes/caddy/config/:/config/caddy
    networks:
      - proxy

  caddy-config:
    container_name: caddy-config
    image: traefik/whoami:latest
    restart: always
    env_file: .caddy.env
    networks:
      - proxy
    labels:
      acme_ca: "https://acme-staging-v02.api.letsencrypt.org/directory" # ðŸ‘ˆ Staging
      # Global Settings
      caddy_0.email: "{env.EMAIL}"
      caddy_0.auto_https: prefer_wildcard
      caddy_0.log: default
      caddy_0.log.format: console
      # Snippets
      # Get wildcard certificate
      caddy_1: (wildcard)
      caddy_1.tls.dns: "cloudflare {env.CF_API_TOKEN}"
      caddy_1.tls.resolvers: 1.1.1.1 1.0.0.1
      caddy_1.handle.abort: ""
      # Secure a site with TinyAuth
      caddy_2: (auth)
      caddy_2.forward_auth: tinyauth:3000
      caddy_2.forward_auth.uri: /api/auth/caddy
      caddy_2.forward_auth.copy_headers : Remote-User Remote-Groups Remote-Name Remote-Email
      # Skip TLS verify for backend with self-signed HTTPS
      caddy_3: (https)
      caddy_3.transport: http
      caddy_3.transport.tls: ""
      caddy_3.transport.tls_insecure_skip_verify: ""
      ## Setup wildcard sites
      caddy_10: "*.titem.top"
      caddy_10.import: wildcard
      # Add our first site, which this container itself
      caddy_99: whoami.titem.top                 # Subdomain using wildcard cert
      caddy_99.reverse_proxy: "{{upstreams 80}}" # Container port
      caddy_99.import: auth *                    # Enable protection by TinyAuth

  tinyauth:
    container_name: tinyauth
    image: ghcr.io/steveiliop56/tinyauth:v3
    restart: always
    env_file: .tinyauth.env
    networks:
      - proxy
    labels:
      caddy: auth.titem.top
      caddy.reverse_proxy: "{{upstreams 3000}}"

  cloudflared:
    container_name: cloudflared
    image: cloudflare/cloudflared:latest
    hostname: cloudflared
    restart: always
    env_file: .cloudflared.env
    command: 'tunnel --no-autoupdate run' # 'tunnel --config /etc/tunnel/config.yml run'
    volumes:
      - /config/homelab/volumes/cloudflared/:/etc/cloudflared/
    networks:
      - proxy

  crowdsec:
    container_name: crowdsec
    image: crowdsecurity/crowdsec
    restart: always
    env_file: .crowdsec.env
    environment:
      COLLECTIONS: "crowdsecurity/nginx"
      GID: "${GID-1000}"
    depends_on:
      - 'caddy'
    volumes:
      - /config/homelab/volumes/crowdsec/acquis.yaml:/etc/crowdsec/acquis.yaml
      - /config/homelab/volumes/crowdsec/:/etc/crowdsec/
      - /config/homelab/volumes/crowdsec/logs/:/var/log/nginx
      - /config/homelab/volumes/crowdsec/data/:/var/lib/crowdsec/data/
    networks:
      - proxy
    labels:
      caddy: crowdsec.titem.top
      caddy.reverse_proxy: "{{upstreams 8080}}"
      caddy.import: auth *

